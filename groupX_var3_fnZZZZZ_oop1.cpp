/////////////////////////////////////////////////////////////
//
// Author: попълнете името си тук
// FN: попълнете факултетния си номер тук
// Date: 27.03.2019
//

///
/// Да се реализира клас Measurement, съхраняващ информация за едно измерване на температурата със следните атрибути:
/// - Място на измерването: символен низ с дължина до 100 символа
/// - Дата на измерването: символен низ във формат "DD/MM/YY"
/// - Измерена температура в градуси по Целзий: число с плаваща запетая
///
class Measurement {
  // моля, попълнете реализацията на класа тук

public:
  // За класа да се реализират:
  // подходящи конструктори, например:

  // конструктор по подразбиране
  Measurement();
  // конструктор с параметри
  Measurement(char const* location, char const* date, double temperature);

  // Ако е необходимо: деструктор, конструктор за копиране, оператор за присвояване

  // Методи за достъп до атрибутите
  char const* getLocation() const;
  char const* getDate() const;
  double getTemperature() const;

  // Други помощни методи, ако е необходимо
};

///
/// Да се реализира клас MaxTemperatures, описващ поредица от измервания на определени географски местоположения,
/// представени чрез масив от измервания, чийто максимален брой се задава при конструиране на списъка.
///

class MaxTemperatures {
  // моля, попълнете реализацията на класа тук

public:
  // За класа да се реализират:
  // Конструктор с един параметър, задаващ максималния брой N на измервания, които ще бъдат съхранявани в списъка
  MaxTemperatures(unsigned N);
  
  // Ако е необходимо: деструктор, конструктор за копиране, оператор за присвояване

  // Метод addMeasurement за добавяне на измерване към списъка (ако вече има измерване на същото място,
  // да остане само измерването с по-голяма стойност)
  void addMeasurement(Measurement const& measurement);

  // Метод findAverage, който изчислява и връща средно аритметичното на всички запазени измервания
  double findAverage() const;
  
  // Метод highestMeasurement, който връща най-високото измерване (ако има две или повече, да се върне някое
  // от тях, без значение кое)
  Measurement highestMeasurement() const;
};

///

#define DOCTEST_CONFIG_IMPLEMENT
#include "doctest.h"

//-------------------------------------------------------------------------
//
// ВАЖНО: Преди предаване на решението, моля премахнете коментара от дадения по-долу ред,
//        за да активирате автоматичните тестове за решението си.
//
//-------------------------------------------------------------------------
// #include "var3-tests.h"

int main() {

  //-------------------------------------------------------------------------
  //
  // ВАЖНО: При предаване на работата във тялото на функцията main не трябва да се
  //        изпълнява нищо друго освен долния ред.
  //
  //-------------------------------------------------------------------------
  doctest::Context().run();
  
  return 0;
}
